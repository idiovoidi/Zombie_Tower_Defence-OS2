{"version":3,"file":"BalanceAnalysisPerformanceTest-C7aFal1Q.js","sources":["../../Z_TD/src/utils/PerformanceProfiler.ts","../../Z_TD/src/utils/BalanceAnalysisPerformanceTest.ts"],"sourcesContent":["/**\n * PerformanceProfiler - Performance testing and profiling utility\n *\n * Provides comprehensive performance testing for balance analysis system:\n * - Profile analysis execution time\n * - Verify < 5ms per analysis requirement\n * - Monitor frame rate impact\n * - Generate performance reports\n */\n\nexport interface PerformanceMetrics {\n  operationName: string;\n  executionTime: number;\n  timestamp: number;\n  passed: boolean;\n  threshold: number;\n}\n\nexport interface PerformanceReport {\n  testName: string;\n  startTime: number;\n  endTime: number;\n  duration: number;\n  metrics: PerformanceMetrics[];\n  summary: {\n    totalOperations: number;\n    passedOperations: number;\n    failedOperations: number;\n    averageExecutionTime: number;\n    maxExecutionTime: number;\n    minExecutionTime: number;\n    passRate: number;\n  };\n  frameRateImpact: {\n    baselineFPS: number;\n    testFPS: number;\n    fpsDropPercent: number;\n    acceptable: boolean;\n  } | null;\n}\n\n/**\n * PerformanceProfiler - Profiles and tests performance of operations\n */\nexport class PerformanceProfiler {\n  private metrics: PerformanceMetrics[] = [];\n  private testStartTime: number = 0;\n  private testName: string = '';\n  private frameRateMonitor: FrameRateMonitor | null = null;\n\n  /**\n   * Start a new performance test\n   */\n  public startTest(testName: string): void {\n    this.testName = testName;\n    this.testStartTime = performance.now();\n    this.metrics = [];\n    console.log(`üî¨ Performance Test Started: ${testName}`);\n  }\n\n  /**\n   * Profile a single operation\n   */\n  public profileOperation(\n    operationName: string,\n    operation: () => void,\n    threshold: number = 5\n  ): PerformanceMetrics {\n    const startTime = performance.now();\n\n    try {\n      operation();\n    } catch (error) {\n      console.error(`‚ùå Error in operation ${operationName}:`, error);\n    }\n\n    const endTime = performance.now();\n    const executionTime = endTime - startTime;\n    const passed = executionTime < threshold;\n\n    const metric: PerformanceMetrics = {\n      operationName,\n      executionTime,\n      timestamp: startTime,\n      passed,\n      threshold,\n    };\n\n    this.metrics.push(metric);\n\n    // Log result\n    const icon = passed ? '‚úÖ' : '‚ùå';\n    const status = passed ? 'PASS' : 'FAIL';\n    console.log(\n      `${icon} ${operationName}: ${executionTime.toFixed(3)}ms [${status}] (threshold: ${threshold}ms)`\n    );\n\n    return metric;\n  }\n\n  /**\n   * Profile an async operation\n   */\n  public async profileAsyncOperation(\n    operationName: string,\n    operation: () => Promise<void>,\n    threshold: number = 5\n  ): Promise<PerformanceMetrics> {\n    const startTime = performance.now();\n\n    try {\n      await operation();\n    } catch (error) {\n      console.error(`‚ùå Error in async operation ${operationName}:`, error);\n    }\n\n    const endTime = performance.now();\n    const executionTime = endTime - startTime;\n    const passed = executionTime < threshold;\n\n    const metric: PerformanceMetrics = {\n      operationName,\n      executionTime,\n      timestamp: startTime,\n      passed,\n      threshold,\n    };\n\n    this.metrics.push(metric);\n\n    // Log result\n    const icon = passed ? '‚úÖ' : '‚ùå';\n    const status = passed ? 'PASS' : 'FAIL';\n    console.log(\n      `${icon} ${operationName}: ${executionTime.toFixed(3)}ms [${status}] (threshold: ${threshold}ms)`\n    );\n\n    return metric;\n  }\n\n  /**\n   * Start monitoring frame rate\n   */\n  public startFrameRateMonitoring(): void {\n    this.frameRateMonitor = new FrameRateMonitor();\n    this.frameRateMonitor.start();\n  }\n\n  /**\n   * Stop monitoring frame rate and get results\n   */\n  public stopFrameRateMonitoring(): {\n    baselineFPS: number;\n    testFPS: number;\n    fpsDropPercent: number;\n    acceptable: boolean;\n  } | null {\n    if (!this.frameRateMonitor) {\n      return null;\n    }\n\n    const result = this.frameRateMonitor.stop();\n    this.frameRateMonitor = null;\n    return result;\n  }\n\n  /**\n   * End the performance test and generate report\n   */\n  public endTest(): PerformanceReport {\n    const endTime = performance.now();\n    const duration = endTime - this.testStartTime;\n\n    // Calculate summary statistics\n    const totalOperations = this.metrics.length;\n    const passedOperations = this.metrics.filter(m => m.passed).length;\n    const failedOperations = totalOperations - passedOperations;\n\n    const executionTimes = this.metrics.map(m => m.executionTime);\n    const averageExecutionTime =\n      executionTimes.length > 0\n        ? executionTimes.reduce((sum, time) => sum + time, 0) / executionTimes.length\n        : 0;\n    const maxExecutionTime = executionTimes.length > 0 ? Math.max(...executionTimes) : 0;\n    const minExecutionTime = executionTimes.length > 0 ? Math.min(...executionTimes) : 0;\n    const passRate = totalOperations > 0 ? (passedOperations / totalOperations) * 100 : 0;\n\n    // Get frame rate impact if monitored\n    const frameRateImpact = this.stopFrameRateMonitoring();\n\n    const report: PerformanceReport = {\n      testName: this.testName,\n      startTime: this.testStartTime,\n      endTime,\n      duration,\n      metrics: [...this.metrics],\n      summary: {\n        totalOperations,\n        passedOperations,\n        failedOperations,\n        averageExecutionTime,\n        maxExecutionTime,\n        minExecutionTime,\n        passRate,\n      },\n      frameRateImpact,\n    };\n\n    // Log summary\n    this.logReport(report);\n\n    return report;\n  }\n\n  /**\n   * Log performance report to console\n   */\n  private logReport(report: PerformanceReport): void {\n    console.log('\\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ');\n    console.log(`üìä Performance Test Report: ${report.testName}`);\n    console.log('‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ');\n\n    console.log(`\\n‚è±Ô∏è  Test Duration: ${report.duration.toFixed(2)}ms`);\n\n    console.log(`\\nüìà Summary Statistics:`);\n    console.log(`   Total Operations: ${report.summary.totalOperations}`);\n    console.log(`   ‚úÖ Passed: ${report.summary.passedOperations}`);\n    console.log(`   ‚ùå Failed: ${report.summary.failedOperations}`);\n    console.log(`   Pass Rate: ${report.summary.passRate.toFixed(1)}%`);\n\n    console.log(`\\n‚ö° Execution Times:`);\n    console.log(`   Average: ${report.summary.averageExecutionTime.toFixed(3)}ms`);\n    console.log(`   Maximum: ${report.summary.maxExecutionTime.toFixed(3)}ms`);\n    console.log(`   Minimum: ${report.summary.minExecutionTime.toFixed(3)}ms`);\n\n    if (report.frameRateImpact) {\n      console.log(`\\nüéÆ Frame Rate Impact:`);\n      console.log(`   Baseline FPS: ${report.frameRateImpact.baselineFPS.toFixed(1)}`);\n      console.log(`   Test FPS: ${report.frameRateImpact.testFPS.toFixed(1)}`);\n      console.log(`   FPS Drop: ${report.frameRateImpact.fpsDropPercent.toFixed(1)}%`);\n      const impactIcon = report.frameRateImpact.acceptable ? '‚úÖ' : '‚ùå';\n      const impactStatus = report.frameRateImpact.acceptable ? 'ACCEPTABLE' : 'UNACCEPTABLE';\n      console.log(`   ${impactIcon} Impact: ${impactStatus}`);\n    }\n\n    // Overall result\n    const overallPass = report.summary.passRate === 100;\n    const resultIcon = overallPass ? '‚úÖ' : '‚ùå';\n    const resultStatus = overallPass ? 'PASSED' : 'FAILED';\n    console.log(`\\n${resultIcon} Overall Result: ${resultStatus}`);\n\n    console.log('‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\\n');\n  }\n\n  /**\n   * Export report as JSON\n   */\n  public exportReport(report: PerformanceReport): string {\n    return JSON.stringify(report, null, 2);\n  }\n}\n\n/**\n * FrameRateMonitor - Monitors frame rate during testing\n */\nclass FrameRateMonitor {\n  private baselineFPS: number = 0;\n  private testFPS: number = 0;\n  private frameCount: number = 0;\n  private startTime: number = 0;\n  private lastFrameTime: number = 0;\n  private isMonitoring: boolean = false;\n  private animationFrameId: number | null = null;\n\n  /**\n   * Start monitoring frame rate\n   */\n  public start(): void {\n    this.isMonitoring = true;\n    this.frameCount = 0;\n    this.startTime = performance.now();\n    this.lastFrameTime = this.startTime;\n\n    // Measure baseline FPS (first 1 second)\n    this.measureBaseline();\n  }\n\n  /**\n   * Measure baseline FPS\n   */\n  private measureBaseline(): void {\n    const baselineStartTime = performance.now();\n    let baselineFrameCount = 0;\n\n    const baselineLoop = () => {\n      const now = performance.now();\n      baselineFrameCount++;\n\n      if (now - baselineStartTime < 1000) {\n        requestAnimationFrame(baselineLoop);\n      } else {\n        this.baselineFPS = baselineFrameCount;\n        console.log(`üìä Baseline FPS: ${this.baselineFPS.toFixed(1)}`);\n\n        // Start test monitoring\n        this.startTestMonitoring();\n      }\n    };\n\n    requestAnimationFrame(baselineLoop);\n  }\n\n  /**\n   * Start test monitoring\n   */\n  private startTestMonitoring(): void {\n    this.frameCount = 0;\n    this.startTime = performance.now();\n\n    const monitorLoop = () => {\n      if (!this.isMonitoring) {\n        return;\n      }\n\n      this.frameCount++;\n      this.animationFrameId = requestAnimationFrame(monitorLoop);\n    };\n\n    this.animationFrameId = requestAnimationFrame(monitorLoop);\n  }\n\n  /**\n   * Stop monitoring and return results\n   */\n  public stop(): {\n    baselineFPS: number;\n    testFPS: number;\n    fpsDropPercent: number;\n    acceptable: boolean;\n  } {\n    this.isMonitoring = false;\n\n    if (this.animationFrameId !== null) {\n      cancelAnimationFrame(this.animationFrameId);\n    }\n\n    const endTime = performance.now();\n    const duration = (endTime - this.startTime) / 1000; // Convert to seconds\n\n    this.testFPS = duration > 0 ? this.frameCount / duration : 0;\n\n    const fpsDropPercent =\n      this.baselineFPS > 0 ? ((this.baselineFPS - this.testFPS) / this.baselineFPS) * 100 : 0;\n\n    // Acceptable if FPS drop is less than 5%\n    const acceptable = fpsDropPercent < 5;\n\n    return {\n      baselineFPS: this.baselineFPS,\n      testFPS: this.testFPS,\n      fpsDropPercent,\n      acceptable,\n    };\n  }\n}\n","/**\n * BalanceAnalysisPerformanceTest - Comprehensive performance testing suite\n *\n * Tests all balance analysis operations to verify:\n * - Execution time < 5ms per analysis\n * - No frame rate impact\n * - Performance under load\n */\n\nimport { BalanceAnalyzer } from './BalanceAnalyzer';\nimport { StatisticalAnalyzer } from './StatisticalAnalyzer';\nimport { PerformanceProfiler } from './PerformanceProfiler';\n\nexport class BalanceAnalysisPerformanceTest {\n  private profiler: PerformanceProfiler;\n\n  constructor() {\n    this.profiler = new PerformanceProfiler();\n  }\n\n  /**\n   * Run all performance tests\n   */\n  public runAllTests(): void {\n    console.log('üöÄ Starting Balance Analysis Performance Tests...\\n');\n\n    // Test 1: BalanceAnalyzer operations\n    this.testBalanceAnalyzerPerformance();\n\n    // Test 2: StatisticalAnalyzer operations\n    this.testStatisticalAnalyzerPerformance();\n\n    // Test 3: Combined analysis (real-world scenario)\n    this.testCombinedAnalysisPerformance();\n\n    // Test 4: Load testing\n    this.testLoadPerformance();\n\n    console.log('‚úÖ All performance tests completed!\\n');\n  }\n\n  /**\n   * Test BalanceAnalyzer performance\n   */\n  private testBalanceAnalyzerPerformance(): void {\n    this.profiler.startTest('BalanceAnalyzer Operations');\n\n    // Test canDefendWave\n    this.profiler.profileOperation('canDefendWave', () => {\n      BalanceAnalyzer.canDefendWave(250, 5000, 50, 800, 5);\n    });\n\n    // Test calculateEfficiencyScore\n    this.profiler.profileOperation('calculateEfficiencyScore', () => {\n      BalanceAnalyzer.calculateEfficiencyScore(50, 150, 0.85, 100, 50);\n    });\n\n    // Test applyDiminishingReturns\n    this.profiler.profileOperation('applyDiminishingReturns', () => {\n      BalanceAnalyzer.applyDiminishingReturns(100, 5, 100);\n    });\n\n    // Test calculateThreatScore\n    this.profiler.profileOperation('calculateThreatScore', () => {\n      BalanceAnalyzer.calculateThreatScore(100, 50, 10, 10, 'BASIC');\n    });\n\n    // Test calculateEffectiveDPS\n    this.profiler.profileOperation('calculateEffectiveDPS', () => {\n      BalanceAnalyzer.calculateEffectiveDPS(50, 100, 25);\n    });\n\n    // Test calculateBreakEvenPoint\n    this.profiler.profileOperation('calculateBreakEvenPoint', () => {\n      BalanceAnalyzer.calculateBreakEvenPoint(100, 50, 10, 100);\n    });\n\n    // Test detectBalanceIssues\n    this.profiler.profileOperation('detectBalanceIssues', () => {\n      BalanceAnalyzer.detectBalanceIssues({\n        damagePerDollar: 12.5,\n        survivalRate: 45,\n        overkillPercent: 18,\n        economyEfficiency: 95,\n      });\n    });\n\n    // Test getOptimalTowerMix\n    this.profiler.profileOperation('getOptimalTowerMix', () => {\n      const towerStats = [\n        { type: 'MachineGun', cost: 100, dps: 50, range: 150 },\n        { type: 'Sniper', cost: 200, dps: 100, range: 300 },\n        { type: 'Shotgun', cost: 150, dps: 75, range: 100 },\n      ];\n      BalanceAnalyzer.getOptimalTowerMix(1000, towerStats);\n    });\n\n    // Test analyzeTowerEfficiency\n    this.profiler.profileOperation('analyzeTowerEfficiency', () => {\n      BalanceAnalyzer.analyzeTowerEfficiency('MachineGun', 100, 50, 150, 0.85, 25, 100, 10);\n    });\n\n    this.profiler.endTest();\n  }\n\n  /**\n   * Test StatisticalAnalyzer performance\n   */\n  private testStatisticalAnalyzerPerformance(): void {\n    this.profiler.startTest('StatisticalAnalyzer Operations');\n\n    // Generate test data\n    const values = Array.from({ length: 100 }, () => 100 + Math.random() * 50);\n    const waveData: Array<[number, number]> = Array.from({ length: 20 }, (_, i) => [\n      i + 1,\n      100 + i * 10 + Math.random() * 20,\n    ]);\n\n    // Test detectOutliers\n    this.profiler.profileOperation('detectOutliers', () => {\n      StatisticalAnalyzer.detectOutliers(values, 2);\n    });\n\n    // Test analyzeTrend\n    this.profiler.profileOperation('analyzeTrend', () => {\n      StatisticalAnalyzer.analyzeTrend(waveData);\n    });\n\n    // Test predictWaveDifficulty\n    this.profiler.profileOperation('predictWaveDifficulty', () => {\n      StatisticalAnalyzer.predictWaveDifficulty(waveData, [21, 22, 23, 24, 25]);\n    });\n\n    // Test calculateSummary\n    this.profiler.profileOperation('calculateSummary', () => {\n      StatisticalAnalyzer.calculateSummary(values);\n    });\n\n    this.profiler.endTest();\n  }\n\n  /**\n   * Test combined analysis (real-world scenario)\n   */\n  private testCombinedAnalysisPerformance(): void {\n    this.profiler.startTest('Combined Analysis (Real-World Scenario)');\n\n    // Simulate real-time analysis (what happens every 10 seconds)\n    this.profiler.profileOperation('Real-Time Analysis', () => {\n      // Detect balance issues\n      BalanceAnalyzer.detectBalanceIssues({\n        damagePerDollar: 15.5,\n        survivalRate: 75,\n        overkillPercent: 8,\n        economyEfficiency: 120,\n      });\n\n      // Analyze tower efficiency\n      BalanceAnalyzer.analyzeTowerEfficiency('MachineGun', 150, 60, 150, 0.9, 30, 120, 12);\n      BalanceAnalyzer.analyzeTowerEfficiency('Sniper', 250, 120, 300, 0.95, 60, 120, 12);\n\n      // Calculate wave defense\n      BalanceAnalyzer.canDefendWave(300, 6000, 55, 850, 8);\n    });\n\n    // Simulate wave-end analysis\n    this.profiler.profileOperation('Wave-End Analysis', () => {\n      const waveData: Array<[number, number]> = Array.from({ length: 10 }, (_, i) => [\n        i + 1,\n        100 + i * 15,\n      ]);\n\n      // Trend analysis\n      StatisticalAnalyzer.analyzeTrend(waveData);\n\n      // Predictions\n      StatisticalAnalyzer.predictWaveDifficulty(waveData, [11, 12, 13, 14, 15]);\n    });\n\n    // Simulate end-game analysis\n    this.profiler.profileOperation('End-Game Analysis', () => {\n      const damageValues = Array.from({ length: 500 }, () => 50 + Math.random() * 100);\n\n      // Outlier detection\n      StatisticalAnalyzer.detectOutliers(damageValues);\n\n      // Statistical summary\n      StatisticalAnalyzer.calculateSummary(damageValues);\n\n      // Final balance check\n      BalanceAnalyzer.detectBalanceIssues({\n        damagePerDollar: 18.2,\n        survivalRate: 85,\n        overkillPercent: 6.5,\n        economyEfficiency: 145,\n      });\n    });\n\n    this.profiler.endTest();\n  }\n\n  /**\n   * Test performance under load\n   */\n  private testLoadPerformance(): void {\n    this.profiler.startTest('Load Testing (1000 Operations)');\n\n    // Test 1000 rapid operations\n    this.profiler.profileOperation(\n      '1000 Balance Issue Detections',\n      () => {\n        for (let _i = 0; _i < 1000; _i++) {\n          BalanceAnalyzer.detectBalanceIssues({\n            damagePerDollar: 10 + Math.random() * 20,\n            survivalRate: 50 + Math.random() * 50,\n            overkillPercent: Math.random() * 30,\n            economyEfficiency: 80 + Math.random() * 60,\n          });\n        }\n      },\n      50\n    ); // Higher threshold for batch operations\n\n    // Test 1000 efficiency calculations\n    this.profiler.profileOperation(\n      '1000 Efficiency Calculations',\n      () => {\n        for (let _i = 0; _i < 1000; _i++) {\n          BalanceAnalyzer.calculateEfficiencyScore(\n            40 + Math.random() * 60,\n            100 + Math.random() * 200,\n            0.7 + Math.random() * 0.3,\n            80 + Math.random() * 120,\n            Math.random() * 100\n          );\n        }\n      },\n      50\n    );\n\n    this.profiler.endTest();\n  }\n\n  /**\n   * Test with frame rate monitoring\n   */\n  public async testWithFrameRateMonitoring(): Promise<void> {\n    console.log('üéÆ Starting Frame Rate Impact Test...\\n');\n\n    this.profiler.startTest('Frame Rate Impact Test');\n    this.profiler.startFrameRateMonitoring();\n\n    // Wait for baseline measurement (1 second)\n    await this.sleep(1000);\n\n    // Run analysis operations for 3 seconds\n    const startTime = Date.now();\n    let operationCount = 0;\n\n    while (Date.now() - startTime < 3000) {\n      // Simulate real-time analysis\n      BalanceAnalyzer.detectBalanceIssues({\n        damagePerDollar: 15,\n        survivalRate: 75,\n        overkillPercent: 10,\n        economyEfficiency: 120,\n      });\n\n      operationCount++;\n      await this.sleep(10); // 10ms between operations (100 ops/sec)\n    }\n\n    console.log(`üìä Performed ${operationCount} operations during test`);\n\n    this.profiler.endTest();\n  }\n\n  /**\n   * Helper: Sleep for specified milliseconds\n   */\n  private sleep(ms: number): Promise<void> {\n    return new Promise(resolve => setTimeout(resolve, ms));\n  }\n}\n\n/**\n * Run performance tests from console\n */\nexport function runBalancePerformanceTests(): void {\n  const tester = new BalanceAnalysisPerformanceTest();\n  tester.runAllTests();\n}\n\n/**\n * Run frame rate impact test from console\n */\nexport async function runFrameRateTest(): Promise<void> {\n  const tester = new BalanceAnalysisPerformanceTest();\n  await tester.testWithFrameRateMonitoring();\n}\n"],"names":["PerformanceProfiler","__publicField","testName","operationName","operation","threshold","startTime","error","executionTime","passed","metric","icon","status","FrameRateMonitor","result","endTime","duration","totalOperations","passedOperations","m","failedOperations","executionTimes","averageExecutionTime","sum","time","maxExecutionTime","minExecutionTime","passRate","frameRateImpact","report","impactIcon","impactStatus","overallPass","baselineStartTime","baselineFrameCount","baselineLoop","now","monitorLoop","fpsDropPercent","acceptable","BalanceAnalysisPerformanceTest","BalanceAnalyzer","towerStats","values","waveData","_","StatisticalAnalyzer","i","damageValues","_i","operationCount","ms","resolve","runBalancePerformanceTests","runFrameRateTest"],"mappings":"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"}