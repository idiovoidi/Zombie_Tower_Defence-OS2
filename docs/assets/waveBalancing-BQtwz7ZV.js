import{T as h}from"./index-DKrfMrI7.js";const v={config:{baseZombieHealth:100,baseZombieCount:5,baseSpawnInterval:2e3,healthScaling:1.2,countScaling:2,spawnRateScaling:.95,expectedTowersPerWave:.5,expectedUpgradeLevelPerWave:.3,difficultyMultiplier:1},calculateExpectedPlayerDPS(t){const a=this.config,e=Math.floor(1+t*a.expectedTowersPerWave),l=Math.floor(t*a.expectedUpgradeLevelPerWave),o=h.MACHINE_GUN.damage,n=h.MACHINE_GUN.fireRate,i=o*(1+l*.5);return e*i*n},calculateZombieHealth(t,a="basic"){const e=this.config,n=e.baseZombieHealth*Math.pow(e.healthScaling,t-1)*{basic:1,fast:.6,tank:4,armored:2.5,swarm:.4,stealth:1.2,mechanical:2}[a]*e.difficultyMultiplier;return Math.floor(n)},calculateZombieCount(t){const a=this.config,e=a.baseZombieCount+(t-1)*a.countScaling,l=Math.floor(t/5)*2,o=e+l;return Math.floor(o*a.difficultyMultiplier)},calculateSpawnInterval(t){const a=this.config,e=a.baseSpawnInterval*Math.pow(a.spawnRateScaling,t-1);return Math.max(500,Math.floor(e))},calculateWaveDuration(t){const a=this.calculateZombieCount(t),e=this.calculateSpawnInterval(t);return a*e+15e3},calculateWaveReward(t){return 50+t*10},calculateTotalWaveHP(t){const a=this.calculateZombieCount(t),e=this.calculateZombieHealth(t,"basic");return a*e},calculateTimeToKillWave(t){const a=this.calculateTotalWaveHP(t),e=this.calculateExpectedPlayerDPS(t);return a/e},validateWaveBalance(t){const a=[],e=this.calculateTimeToKillWave(t),l=this.calculateWaveDuration(t)/1e3;return e>l*.9&&a.push(`⚠️ Wave ${t}: Very tight! Time to kill (${e.toFixed(1)}s) is close to wave duration (${l.toFixed(1)}s)`),e>l&&a.push(`❌ Wave ${t}: IMPOSSIBLE! Time to kill (${e.toFixed(1)}s) exceeds wave duration (${l.toFixed(1)}s)`),e<l*.3&&a.push(`ℹ️ Wave ${t}: Too easy? Time to kill (${e.toFixed(1)}s) is much less than wave duration (${l.toFixed(1)}s)`),a},generateBalanceReport(t=1,a=10){let e=`=== WAVE BALANCE REPORT ===

`;for(let l=t;l<=a;l++){const o=this.calculateZombieCount(l),n=this.calculateZombieHealth(l),i=this.calculateTotalWaveHP(l),c=this.calculateExpectedPlayerDPS(l),s=this.calculateTimeToKillWave(l),r=this.calculateWaveDuration(l)/1e3,p=this.calculateSpawnInterval(l),d=this.calculateWaveReward(l);e+=`Wave ${l}:
`,e+=`  Zombies: ${o} × ${n}hp = ${i} total HP
`,e+=`  Spawn Interval: ${p}ms
`,e+=`  Expected Player DPS: ${c.toFixed(1)}
`,e+=`  Time to Kill: ${s.toFixed(1)}s / ${r.toFixed(1)}s (${(s/r*100).toFixed(1)}%)
`,e+=`  Reward: $${d}
`;const u=this.validateWaveBalance(l);u.length>0&&(e+=`  ${u.join(`
  `)}
`),e+=`
`}return e},updateConfig(t){this.config={...this.config,...t}},resetConfig(){this.config={baseZombieHealth:100,baseZombieCount:5,baseSpawnInterval:2e3,healthScaling:1.2,countScaling:2,spawnRateScaling:.95,expectedTowersPerWave:.5,expectedUpgradeLevelPerWave:.3,difficultyMultiplier:1}}};function m(t=1,a=10){console.log(v.generateBalanceReport(t,a))}export{v as WaveBalancing,m as printWaveBalance};
//# sourceMappingURL=waveBalancing-BQtwz7ZV.js.map
